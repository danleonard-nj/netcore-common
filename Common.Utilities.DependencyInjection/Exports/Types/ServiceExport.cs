/* Copyright (C) 2021 Dan Leonard
 * 
 * This  is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
 * for more details.
 */

using Common.Utilities.DependencyInjection.Helpers;
using System;

namespace Common.Utilities.DependencyInjection.Exports.Types
{
		public interface IServiceExport
		{
				RegistrationType RegistrationType { get; }
				Type ImplementationType { get; }
				Type ServiceType { get; }
				bool IsImplementationInstance { get; }
				object ImplementationInstance { get; }
		}

		public class ServiceExport : IServiceExport
		{
				public Type ServiceType { get => _serviceType; }
				public Type ImplementationType { get => _implementationType; }
				public RegistrationType RegistrationType { get => _registrationType; }
				public bool IsImplementationInstance { get => _isServiceInstance; }
				public object ImplementationInstance { get => _serviceInstance; }

				/// <summary>
				/// <para>ex. ServiceExport(typeof(IServiceType))</para>
				/// <para>The matching implementation type that implements the service type interface will be
				/// found automatically and registered.</para>
				/// </summary>
				/// <param name="serviceType"></param>
				/// <param name="registrationType"></param>
				public ServiceExport(Type serviceType, RegistrationType registrationType = RegistrationType.Scoped)
				{
						_serviceType = serviceType.IsInterface ? serviceType : throw new ArgumentException("Invalid type", nameof(serviceType));

						_registrationType = registrationType;
						_implementationType = TypeHelper.GetImplementationType(serviceType);
				}

				/// <summary>
				/// <para>ex. ServiceExport(typeof(IServiceType), x => new Implementation())</para>
				/// <para>The instance generated by the factory method will be registered as the specified service type</para>
				/// </summary>
				/// <param name="serviceType"></param>
				/// <param name="instanceFactory"></param>
				/// <param name="registrationType"></param>
				public ServiceExport(Type serviceType, Func<IServiceExport, object> instanceFactory, RegistrationType registrationType = RegistrationType.Scoped)
				{
						_serviceType = serviceType;
						_implementationType = serviceType;
						
						_registrationType = registrationType;

						_isServiceInstance = true;
						_serviceInstance = instanceFactory(this);
				}

				private readonly bool _isServiceInstance;
				private readonly object _serviceInstance;

				private readonly Type _serviceType;
				private readonly Type _implementationType;

				private readonly RegistrationType _registrationType;
		}

		public class ServiceExport<TService> : IServiceExport
		{
				public Type ServiceType { get => _serviceType; }
				public Type ImplementationType { get => _implementationType; }
				public RegistrationType RegistrationType { get => _registrationType; }
				public bool IsRegisteredInstance { get; } = false;
				public bool IsImplementationInstance { get => _isServiceInstance; }
				public object ImplementationInstance { get => _serviceInstance; }


				/// <summary>
				/// <para>ex. ServiceExport<IServiceType>()</para>
				/// <para>Registeres the implementation type found automatically from the service type for the
				/// service type specified as the generic type.</para>
				/// </summary>
				/// <param name="registrationType"></param>
				public ServiceExport(RegistrationType registrationType)
				{
						_serviceType = typeof(TService);
						_implementationType = TypeHelper.GetImplementationType(typeof(TService));

						_registrationType = registrationType;
				}

				/// <summary>
				/// <para>ex. ServiceExport<IServiceType>(x => new Implementation())</para>
				/// <para>Registers the implementation instance generated by the factory method as the service type
				/// specified as the generic type.</para>
				/// </summary>
				/// <typeparamref name="TService"/>
				/// <param name="serviceFactory"></param>
				/// <param name="registrationType"></param>
				public ServiceExport(Func<IServiceExport, object> serviceFactory, RegistrationType registrationType)
				{
						_serviceType = typeof(TService);

						_registrationType = registrationType;

						_isServiceInstance = true;
						_serviceInstance = serviceFactory(this);
				}

				/// <summary>
				/// Singleton only
				/// </summary>
				/// <param name="implementationInsance"></param>
				public ServiceExport(object implementationInstance)
				{
						_serviceType = typeof(TService);

						_registrationType = RegistrationType.Singleton;

						_isServiceInstance = true;
						_serviceInstance = implementationInstance;
				}

				private readonly bool _isServiceInstance;
				private readonly object _serviceInstance;

				private readonly Type _implementationType;
				private readonly Type _serviceType;

				private readonly RegistrationType _registrationType;
		}

		public class ServiceExport<TService, TImplementation> : IServiceExport
		{
				public Type ServiceType { get => _serviceType; }
				public Type ImplementationType { get => _implementationType; }
				public RegistrationType RegistrationType { get => _registrationType; }
				public bool IsImplementationInstance { get => _isServiceInstance; }
				public object ImplementationInstance { get => _serviceInstance; }

				/// <summary>
				/// <para>ex. ServiceExport<TService, TImplementation>()</para>
				/// <para>Registers the implementation type as the service type specified in the type params</para>
				/// </summary>
				/// <typeparamref name="TService"/>
				/// <typeparamref name="TService"/>
				/// <param name="registrationType"></param>
				public ServiceExport(RegistrationType registrationType)
				{
						_serviceType = typeof(TService);
						_implementationType = typeof(TImplementation);

						_registrationType = registrationType;
				}

				/// <summary>
				/// <para>ServiceExport<TService, TImplementation>(x => new Implementation())</para>
				/// <para>Register the instance generated by the factory method as the service type specified in the type
				/// parameter</para>
				/// </summary>
				/// <param name="serviceFactory"></param>
				/// <param name="registrationType"></param>
				public ServiceExport(Func<IServiceExport, TImplementation> serviceFactory, RegistrationType registrationType)
				{
						_serviceType = typeof(TService);
						_implementationType = typeof(TImplementation);

						_registrationType = registrationType;

						_isServiceInstance = true;
						_serviceInstance = serviceFactory(this);
				}

				public ServiceExport(TImplementation implementationInstance)
				{
						_serviceType = typeof(TService);
						_implementationType = typeof(TImplementation);

						_registrationType = RegistrationType.Singleton;

						_isServiceInstance = true;
						_serviceInstance = implementationInstance;
				}

				private readonly bool _isServiceInstance;
				private readonly object _serviceInstance;

				private readonly Type _implementationType;
				private readonly Type _serviceType;

				private readonly RegistrationType _registrationType;
		}
}
